#!/bin/bash
set -eo pipefail

# Source required paths and configs
source /usr/local/lib/paths.sh
source "${LIB_PATH}/backup_config.sh"
source "${LIB_PATH}/backup.sh"

# Validate environment variables
required_vars=(
    "S3_ENDPOINT_URL"
    "S3_BACKUP_BUCKET"
    "S3_ACCESS_KEY"
    "S3_SECRET_KEY"
    "PROXYSQL_ADMIN_USER"
    "PROXYSQL_ADMIN_PASSWORD"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "Error: Required environment variable $var is not set" >&2
        exit 1
    fi
done

# Setup logging
LOG_DIR="/var/log/proxysql"
LOG_FILE="${LOG_DIR}/backup.log"
ROTATE_SIZE=10M

setup_logging() {
    if ! mkdir -p "$LOG_DIR"; then
        echo "Error: Failed to create log directory" >&2
        exit 1
    fi
    
    # Rotate log if needed
    if [ -f "$LOG_FILE" ] && [ "$(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE")" -gt $((10*1024*1024)) ]; then
        mv "$LOG_FILE" "${LOG_FILE}.1"
        gzip -f "${LOG_FILE}.1"
    fi
    
    # Ensure log file exists and is writable
    touch "$LOG_FILE" || exit 1
    chmod 640 "$LOG_FILE" || exit 1
}

log() {
    local level=$1
    shift
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local hostname=$(hostname)
    local pid=$$
    
    printf '[%s] [%s] [%s] [PID:%d] %s\n' \
        "$timestamp" "$level" "$hostname" "$pid" "$*" | tee -a "$LOG_FILE"
}

rotate_logs() {
    local max_size=$((10*1024*1024))  # 10MB
    local log_dir="/var/log/proxysql"
    local max_backups=5
    
    if [ -f "$LOG_FILE" ] && [ "$(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE")" -gt "$max_size" ]; then
        for i in $(seq $((max_backups-1)) -1 1); do
            [ -f "${LOG_FILE}.$i.gz" ] && mv "${LOG_FILE}.$i.gz" "${LOG_FILE}.$((i+1)).gz"
        done
        mv "$LOG_FILE" "${LOG_FILE}.1"
        gzip -f "${LOG_FILE}.1"
        touch "$LOG_FILE"
        chmod 640 "$LOG_FILE"
    fi
}

# Setup logging
setup_logging

# Start backup process
log "INFO" "Starting scheduled backup..."

if ! backup_proxysql; then
    log "ERROR" "ProxySQL backup failed"
    exit 1
fi

if ! cleanup_old_backups; then
    log "ERROR" "Backup cleanup failed"
    exit 1
fi

log "INFO" "Backup cycle completed successfully"
